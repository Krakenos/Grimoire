"""add persona support

Revision ID: 7c91039c0bda
Revises: 4a9f2c2e6c50
Create Date: 2024-11-02 12:17:10.656670

"""

from collections import defaultdict
from collections.abc import Sequence

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision: str = "7c91039c0bda"
down_revision: str | None = "4a9f2c2e6c50"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "character",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("chat_id", sa.Integer(), nullable=False),
        sa.Column("name", sqlalchemy_utils.types.encrypted.encrypted_type.StringEncryptedType(), nullable=False),
        sa.Column("description", sqlalchemy_utils.types.encrypted.encrypted_type.StringEncryptedType(), nullable=True),
        sa.Column(
            "character_note", sqlalchemy_utils.types.encrypted.encrypted_type.StringEncryptedType(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["chat_id"],
            ["chat.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "character_trigger_text",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("character_id", sa.Integer(), nullable=False),
        sa.Column("text", sqlalchemy_utils.types.encrypted.encrypted_type.StringEncryptedType(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["character.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("message", sa.Column("character_id", sa.Integer(), nullable=True))

    connection = op.get_bind()
    Session = sa.orm.sessionmaker()
    session = Session(bind=connection)

    statement = text("SELECT id, chat_id, sender_name, character_id FROM message")
    characters = []
    chat_rows = session.execute(statement)
    for row in chat_rows:
        if (row[1], row[2]) not in characters:
            characters.append((row[1], row[2]))

    # Add characters
    for character in characters:
        statement = text("INSERT INTO character (chat_id, name) VALUES (:chat_id, :character_name)")
        session.execute(statement, {"chat_id": character[0], "character_name": character[1]})
    session.commit()

    # Add character triggers
    statement = text("SELECT id, chat_id, name FROM character")
    character_rows = session.execute(statement)
    for row in character_rows:
        statement = text("INSERT INTO character_trigger_text (character_id, text) VALUES (:character_id, :name)")
        session.execute(statement, {"character_id": row[0], "name": row[2]})
    session.commit()

    # Migrate field
    statement = text("SELECT id, chat_id, name FROM character")
    character_rows = session.execute(statement)
    id_map = defaultdict(dict)
    for row in character_rows:
        id_map[row[1]][row[2]] = row[0]

    statement = text("SELECT id, chat_id, sender_name, character_id FROM message")
    chat_rows = session.execute(statement)
    for row in chat_rows:
        statement = text("UPDATE message SET character_id = :character_id WHERE id = :id")
        session.execute(statement, {"character_id": id_map[row[1]][row[2]], "id": row[0]})
    session.commit()

    op.alter_column("message", "character_id", nullable=False)
    op.create_foreign_key(None, "message", "character", ["character_id"], ["id"])
    op.drop_column("message", "sender_name")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    Session = sa.orm.sessionmaker()
    session = Session(bind=connection)

    op.add_column("message", sa.Column("sender_name", sa.VARCHAR(), autoincrement=False, nullable=True))

    # Migrate field
    statement = text("SELECT id, name FROM character")
    character_rows = session.execute(statement)
    id_map = {}
    for row in character_rows:
        id_map[row[0]] = row[1]

    statement = text("SELECT id, character_id FROM message")
    message_rows = session.execute(statement)
    for row in message_rows:
        statement = text("UPDATE message SET sender_name = :sender_name WHERE id = :id")
        session.execute(statement, {"sender_name": id_map[row[1]], "id": row[0]})
    session.commit()

    op.drop_constraint("message_character_id_fkey", "message", type_="foreignkey")
    op.drop_column("message", "character_id")
    op.drop_table("character_trigger_text")
    op.drop_table("character")
    # ### end Alembic commands ###
