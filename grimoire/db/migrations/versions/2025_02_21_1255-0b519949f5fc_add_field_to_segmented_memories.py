"""add field to segmented memories

Revision ID: 0b519949f5fc
Revises: f6391e0dc0e5
Create Date: 2025-02-21 12:55:26.152844

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy import Unicode
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy_utils import StringEncryptedType
from sqlalchemy_utils.types.encrypted.encrypted_type import AesEngine

from grimoire.core.settings import settings

# revision identifiers, used by Alembic.
revision: str = "0b519949f5fc"
down_revision: str | None = "f6391e0dc0e5"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

Base = declarative_base()

encryption_key = settings.ENCRYPTION_KEY


class SegmentedMemory(Base):
    __tablename__ = "segmented_memories"

    id = sa.Column(sa.Integer, primary_key=True)
    summary = sa.Column(StringEncryptedType(Unicode, encryption_key, AesEngine, "pkcs5"), nullable=False)
    memory_entry = sa.Column(StringEncryptedType(Unicode, encryption_key, AesEngine, "pkcs5"), nullable=True)


def upgrade() -> None:
    op.add_column(
        "segmented_memories",
        sa.Column("memory_entry", sqlalchemy_utils.types.encrypted.encrypted_type.StringEncryptedType(), nullable=True),
    )

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    query = sa.select(SegmentedMemory)
    for result in session.scalars(query).all():
        result.memory_entry = f"[ Memory: {result.summary} ]"
    session.commit()
    op.alter_column("segmented_memories", "memory_entry", nullable=False)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("segmented_memories", "memory_entry")
    # ### end Alembic commands ###
